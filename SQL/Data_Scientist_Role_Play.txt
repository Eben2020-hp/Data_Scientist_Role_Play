By: Eben Emmanuel
Date: June-25th-2020

Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that 
will help you profile and understand the data just like a data scientist would. For this 
first part of the assignment, you will be assessed both on the correctness of your 
findings, as well as the code you used to arrive at your answer. You will be graded on 
how easy your code is to read, so remember to use proper formatting and comments where 
necessary.

In the second part of the assignment, you are asked to come up with your own inferences 
and analysis of the data for a particular research question you want to answer. You will be 
required to prepare the dataset for the analysis you choose to do. As with the first part, 
you will be graded, in part, on how easy your code is to read, so use proper formatting 
and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions 
you are being asked, and your job will be to transfer your answers and SQL coding where
indicated into this worksheet so that your peers can review your work. You should be able 
to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) 
to copy and paste your answers. If you are going to use Word or some other page layout
application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact
for you reviewer.

Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000
vi. Checkin = 493
vii. Photo = 10000
viii. Tip = 3979 (business_id)
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: NO
	
	
	SQL code used to arrive at answer: SELECT *
				           FROM user
				           WHERE id IS NULL OR 
		  			   name IS NULL OR 
		  			   review_count IS NULL OR 
		 			   yelping_since IS NULL OR
				       	   useful IS NULL OR 
		  			   funny IS NULL OR 
		  			   cool IS NULL OR 
		  			   fans IS NULL OR 
		    			   average_stars IS NULL OR 
		 			   compliment_hot IS NULL OR 
					   compliment_more IS NULL OR 
					   compliment_profile IS NULL OR 
					   compliment_cute IS NULL OR 
					   compliment_list IS NULL OR 
					   compliment_note IS NULL OR 
					   compliment_plain IS NULL OR 
					   compliment_cool IS NULL OR 
				       	   compliment_funny IS NULL OR 
					   compliment_writer IS NULL OR 
					   compliment_photos IS NULL;


4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1.0	max:	5.0	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:    2000	avg: 24,2995



5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer: SELECT city
					   ,sum(review_count) AS review
					   FROM business
					   GROUP BY city
					   ORDER BY review DESC;
	
	
	Copy and Paste the Result Below:
+-----------------+--------+
| city            | review |
+-----------------+--------+
| Las Vegas       |  82854 |
| Phoenix         |  34503 |
| Toronto         |  24113 |
| Scottsdale      |  20614 |
| Charlotte       |  12523 |
| Henderson       |  10871 |
| Tempe           |  10504 |
| Pittsburgh      |   9798 |
| MontrÃ©al        |   9448 |
| Chandler        |   8112 |
| Mesa            |   6875 |
| Gilbert         |   6380 |
| Cleveland       |   5593 |
| Madison         |   5265 |
| Glendale        |   4406 |
| Mississauga     |   3814 |
| Edinburgh       |   2792 |
| Peoria          |   2624 |
| North Las Vegas |   2438 |
| Markham         |   2352 |
| Champaign       |   2029 |
| Stuttgart       |   1849 |
| Surprise        |   1520 |
| Lakewood        |   1465 |
| Goodyear        |   1155 |
+-----------------+--------+
(Output limit exceeded, 25 of 362 total rows shown)



6. Find the distribution of star ratings to the business in the following cities:

i. Avon
	
SQL code used to arrive at answer:
		
			SELECT stars
			,COUNT(stars) AS count
			FROM business
			WHERE city ='Avon'
			GROUP BY stars;	
	
Copy and Paste the Resulting Table Below (2 columns - star rating and count):
	    
			+-------+-------+
			| stars | count |
			+-------+-------+
			|   1.5 |     1 |
			|   2.5 |     2 |
			|   3.5 |     3 |
			|   4.0 |     2 |
			|   4.5 |     1 |
			|   5.0 |     1 |
			+-------+-------+
	
ii. Beachwood

SQL code used to arrive at answer:
	

			SELECT stars
			,COUNT(stars) AS count
			FROM business
			WHERE city ='Beachwood'
			GROUP BY stars;	

Copy and Paste the Resulting Table Below (2 columns - star rating and count):
		
			+-------+-------+
			| stars | count |
			+-------+-------+
			|   2.0 |     1 |
			|   2.5 |     1 |
			|   3.0 |     2 |
			|   3.5 |     2 |
			|   4.0 |     1 |
			|   4.5 |     2 |
			|   5.0 |     5 |
			+-------+-------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer: SELECT name
					   ,review_count AS count
					   FROM user
					   ORDER BY  count DESC
					   LIMIT 3;

	
		
	Copy and Paste the Result Below:
+--------+-------+
| name   | count |
+--------+-------+
| Gerald |  2000 |
| Sara   |  1629 |
| Yuri   |  1339 |
+--------+-------+



8. Does posting more reviews correlate with more fans?

		As the number of reviews decreases there is a varying pattern with the number of fans.
		Thus we can conclude that there is only limited correlation between posting more reviews and gaining more fans. 

	Please explain your findings and interpretation of the results:
 

	SELECT name
	,fans
	,review_count
	,STRFTIME('%Y',yelping_since) AS year
	FROM user
	ORDER BY review_count DESC;
+-----------+------+--------------+------+
| name      | fans | review_count | year |
+-----------+------+--------------+------+
| Gerald    |  253 |         2000 | 2012 |
| Sara      |   50 |         1629 | 2010 |
| Yuri      |   76 |         1339 | 2008 |
| .Hon      |  101 |         1246 | 2006 |
| William   |  126 |         1215 | 2015 |
| Harald    |  311 |         1153 | 2012 |
| eric      |   16 |         1116 | 2007 |
| Roanna    |  104 |         1039 | 2006 |
| Mimi      |  497 |          968 | 2011 |
| Christine |  173 |          930 | 2009 |
| Ed        |   38 |          904 | 2009 |
| Nicole    |   43 |          864 | 2006 |
| Fran      |  124 |          862 | 2012 |
| Mark      |  115 |          861 | 2009 |
| Christina |   85 |          842 | 2012 |
| Dominic   |   37 |          836 | 2011 |
| Lissa     |  120 |          834 | 2007 |
| Lisa      |  159 |          813 | 2009 |
| Alison    |   61 |          775 | 2007 |
| Sui       |   78 |          754 | 2009 |
| Tim       |   35 |          702 | 2009 |
| L         |   10 |          696 | 2010 |
| Angela    |  101 |          694 | 2010 |
| Crissy    |   25 |          676 | 2008 |
| Lyn       |   45 |          675 | 2009 |
+-----------+------+--------------+------+
(Output limit exceeded, 25 of 10000 total rows shown)



9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: From the below outputs we can thus conclude that there is indeed more reviews with the word love (1780) than the word hate (232).

	
	SQL code used to arrive at answer:

		SELECT COUNT(*)							
		FROM review
		WHERE text LIKE '%love%';
	
			+----------+
	OUTPUT->	| COUNT(*) |
			+----------+
			|     1780 |
			+----------+


		SELECT COUNT(*)
		FROM review
		WHERE text LIKE '%hate%';

			+----------+
	OUTPUT->	| COUNT(*) |
			+----------+
			|      232 |
			+----------+



10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer: SELECT name
					   ,fans
					   FROM user
					   ORDER BY fans DESC
					   LIMIT 10;

	
	
	Copy and Paste the Result Below:

+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+




Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
	Yes, we can see from the below table that the 4-5 star_rating groups take a shorter time as compared to the 2-3 star_rating groups.


ii. Do the two groups you chose to analyze have a different number of reviews?
         Yes, we can see that the 4-5 star groups have a large number of reviews than the 2-3 star groups.
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
	 We cant infer much as each business happens in a different zip codes.

SQL code used for analysis:

			SELECT B.name,
			   B.review_count,
			   H.hours,
			   postal_code,
			   CASE
				  WHEN hours LIKE "%monday%" THEN 1
				  WHEN hours LIKE "%tuesday%" THEN 2
				  WHEN hours LIKE "%wednesday%" THEN 3
				  WHEN hours LIKE "%thursday%" THEN 4
				  WHEN hours LIKE "%friday%" THEN 5
				  WHEN hours LIKE "%saturday%" THEN 6
				  WHEN hours LIKE "%sunday%" THEN 7
			   END AS ord,
			   CASE
				  WHEN B.stars BETWEEN 2 AND 3 THEN '2-3 stars'
				  WHEN B.stars BETWEEN 4 AND 5 THEN '4-5 stars'
			   END AS star_rating
		FROM business B INNER JOIN hours H
		ON B.id = H.business_id
		INNER JOIN category C
		ON C.business_id = B.id
		WHERE (B.city == 'Las Vegas'
		AND
		C.category LIKE 'food')
		AND
		(B.stars BETWEEN 2 AND 3
		OR
		B.stars BETWEEN 4 AND 5)
		GROUP BY stars,ord
		ORDER BY ord ASC;



2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: The businesses that are open tend to have more reviews than ones that are closed on average.

         Open-> review_count = 31.7570754717
	 Closed-> review_count = 23.1980263158 
         
ii. Difference 2: The average star rating is higher for businesses that are open than businesses that are closed.
         
         Open-> stars = 31.7570754717
	 Closed-> stars = 23.1980263158 

         
SQL code used for analysis: SELECT name
			    ,city
			    ,AVG(review_count) AS avg_review
			    ,stars
			    ,is_open
			    FROM business
			    GROUP BY is_open;



3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. 
These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
	What I chose here is a rather simple analysis where I am trying to understand whether there is any relationship between review_counts, fans and average_star from the years 2010 to 2017.
	The users in my data are selected with the assumption that they are common with the friends table and the years are selected with the assumption that they are common with the elite_years table.   
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
	This analysis is used to help the users who are found to be in common with the friend table understand the impact of reviews and fans. For this analysis I have considered the name of the user, the number of fans, the review_counts and the average_star.
	My primary focus will be on these data and if needed we can add more. 

iii. Output of your finished dataset:
         
+-----------------+------+--------------+---------------+------+
| NAME            | fans | review_count | average_stars | year |
+-----------------+------+--------------+---------------+------+
| DAVE            |    1 |           14 |          3.73 | 2012 |
| JONATHAN        |    2 |            6 |          4.17 | 2013 |
| JULES           |    2 |           62 |          3.38 | 2013 |
| MAYTE           |    2 |            8 |          3.75 | 2010 |
| EMMA            |    3 |           31 |          3.31 | 2013 |
| KAITLAN         |    3 |          235 |          3.92 | 2015 |
| ELENA           |    8 |           21 |          3.22 | 2011 |
| VIOLETTE CAROLE |    8 |          111 |          3.86 | 2014 |
| MINH            |   10 |           60 |          3.88 | 2010 |
| PATRICK         |   12 |          151 |          3.81 | 2013 |
| PRIYA           |   13 |          119 |          3.64 | 2016 |
| REGINA          |   13 |           95 |          4.05 | 2014 |
| TANYA           |   23 |          137 |          3.94 | 2010 |
| CHRISTINA       |   27 |           86 |          4.69 | 2013 |
| BRIDGET         |   55 |          574 |          3.75 | 2007 |
| JIM             |   57 |          671 |          3.85 | 2008 |
| FRAN            |  124 |          862 |           4.1 | 2012 |
| WILLIAM         |  126 |         1215 |          4.41 | 2015 |
| AMY             |  503 |          609 |          3.21 | 2007 |
+-----------------+------+--------------+---------------+------+
         
iv. Provide the SQL code you used to create your final dataset:

		SELECT UPPER(U.name) AS NAME
		,U.fans
		,U.review_count
		,U.average_stars
		,STRFTIME('%Y',yelping_since) AS year
		FROM  user U
		INNER JOIN friend F
		ON U.id = F.friend_id
		INNER JOIN elite_years E
		ON F.user_id = E.user_id
		GROUP BY U.name
		HAVING year >= 2010
		ORDER BY fans ASC;